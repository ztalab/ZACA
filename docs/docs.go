// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/ca/intermediate_topology": {
            "get": {
                "description": "Sub-CA topology",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CA"
                ],
                "summary": "Sub-CA topology",
                "responses": {
                    "200": {
                        "description": " ",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.MSPNormalizeHTTPResponseBody"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/ca.IntermediateObject"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    }
                }
            }
        },
        "/ca/overall_certs_count": {
            "get": {
                "description": "Total number of certificates, number by classification, number of corresponding services",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CA"
                ],
                "summary": "(p2)Certificate classification",
                "responses": {
                    "200": {
                        "description": " ",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.MSPNormalizeHTTPResponseBody"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/ca.OverallCertsCountResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    }
                }
            }
        },
        "/ca/overall_expiry_certs": {
            "get": {
                "description": "Number of certificates expired: within one week, within 1/3 months and after 3 months",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CA"
                ],
                "summary": "(p2)Certificate validity",
                "responses": {
                    "200": {
                        "description": " ",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.MSPNormalizeHTTPResponseBody"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/ca.OverallExpiryCertsResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    }
                }
            }
        },
        "/ca/overall_units_enable_status": {
            "get": {
                "description": "Total enabled, total disabled, corresponding services",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CA"
                ],
                "summary": "(p2)Enabling condition",
                "responses": {
                    "200": {
                        "description": " ",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.MSPNormalizeHTTPResponseBody"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/ca.OverallUnitsEnableStatus"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    }
                }
            }
        },
        "/ca/role_profiles": {
            "get": {
                "description": "Environmental isolation type",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CA"
                ],
                "summary": "(p1)Environmental isolation type",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Only a list of types is returned for search criteria",
                        "name": "short",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": " ",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.MSPNormalizeHTTPResponseBody"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    }
                }
            }
        },
        "/ca/upper_ca_intermediate_topology": {
            "get": {
                "description": "Upper CA topology",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CA"
                ],
                "summary": "Upper CA topology",
                "responses": {
                    "200": {
                        "description": " ",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.MSPNormalizeHTTPResponseBody"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/ca.IntermediateObject"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    }
                }
            }
        },
        "/ca/workload_units": {
            "get": {
                "description": "CA Units",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CA"
                ],
                "summary": "(p1)Service unit",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of pages, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page limit, default 20",
                        "name": "limit_num",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UniqueID Query",
                        "name": "unique_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": " ",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.MSPNormalizeHTTPResponseBody"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/helper.MSPNormalizeList"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "list": {
                                                            "type": "array",
                                                            "items": {
                                                                "$ref": "#/definitions/ca.WorkloadUnit"
                                                            }
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    }
                }
            }
        },
        "/certleaf/cert_chain": {
            "get": {
                "description": "Get certificate chain information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "certleaf"
                ],
                "summary": "(p1)CertChain",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Show CA's own certificate chain",
                        "name": "self_cert",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SN+AKI Query the specified certificate",
                        "name": "sn",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SN+AKI Query the specified certificate",
                        "name": "aki",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": " ",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.MSPNormalizeHTTPResponseBody"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/certleaf.LeafCert"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    }
                }
            }
        },
        "/certleaf/cert_chain_from_root": {
            "get": {
                "description": "All certificate chains from the root Perspective",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "certleaf"
                ],
                "summary": "(p1)Root view certificate chain",
                "responses": {
                    "200": {
                        "description": " ",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.MSPNormalizeHTTPResponseBody"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/certleaf.RootCertChains"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    }
                }
            }
        },
        "/workload/cert": {
            "get": {
                "description": "Certificate details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workload"
                ],
                "summary": "Detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Certificate sn",
                        "name": "sn",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Certificate aki",
                        "name": "aki",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": " ",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.MSPNormalizeHTTPResponseBody"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schema.FullCert"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    }
                }
            }
        },
        "/workload/certs": {
            "get": {
                "description": "Certificate list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workload"
                ],
                "summary": "(p3)List",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Certificate type default",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Query by unique ID",
                        "name": "unique_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Query by certificate serial number",
                        "name": "cert_sn",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Certificate status good/revoked",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort, default issued_at desc",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Expiration, starting point",
                        "name": "expiry_start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Expiration, end time point",
                        "name": "expiry_end_time",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Paging parameters, default 20",
                        "name": "limit_num",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of pages, default 1",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": " ",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.MSPNormalizeHTTPResponseBody"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/helper.MSPNormalizeList"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "list": {
                                                            "type": "array",
                                                            "items": {
                                                                "$ref": "#/definitions/schema.SampleCert"
                                                            }
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    }
                }
            }
        },
        "/workload/lifecycle/forbid_new_certs": {
            "post": {
                "description": "Prohibit a uniqueID from requesting a certificate",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workload"
                ],
                "summary": "Application for certificate is prohibited",
                "parameters": [
                    {
                        "description": " ",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/workload.ForbidNewCertsParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": " ",
                        "schema": {
                            "$ref": "#/definitions/helper.MSPNormalizeHTTPResponseBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    }
                }
            }
        },
        "/workload/lifecycle/forbid_unit": {
            "post": {
                "description": "Revoke and prohibit service certificates",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workload"
                ],
                "summary": "(p1)Revoke and prohibit service certificates",
                "parameters": [
                    {
                        "description": " ",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/workload.ForbidUnitParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": " ",
                        "schema": {
                            "$ref": "#/definitions/helper.MSPNormalizeHTTPResponseBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    }
                }
            }
        },
        "/workload/lifecycle/recover": {
            "post": {
                "description": "Restore certificate",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workload"
                ],
                "summary": "(p3)Recover",
                "parameters": [
                    {
                        "description": "sn+aki / unique_id either-or",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/workload.RecoverCertsParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": " ",
                        "schema": {
                            "$ref": "#/definitions/helper.MSPNormalizeHTTPResponseBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    }
                }
            }
        },
        "/workload/lifecycle/recover_forbid_new_certs": {
            "post": {
                "description": "Recovery allows a uniqueID to request a certificate",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workload"
                ],
                "summary": "Resume application certificate",
                "parameters": [
                    {
                        "description": " ",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/workload.ForbidNewCertsParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": " ",
                        "schema": {
                            "$ref": "#/definitions/helper.MSPNormalizeHTTPResponseBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    }
                }
            }
        },
        "/workload/lifecycle/recover_unit": {
            "post": {
                "description": "Restore and allow service certificates",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workload"
                ],
                "summary": "(p1)Restore and allow service certificates",
                "parameters": [
                    {
                        "description": " ",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/workload.ForbidUnitParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": " ",
                        "schema": {
                            "$ref": "#/definitions/helper.MSPNormalizeHTTPResponseBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    }
                }
            }
        },
        "/workload/lifecycle/revoke": {
            "post": {
                "description": "revoked certificate",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workload"
                ],
                "summary": "(p3)Revoke",
                "parameters": [
                    {
                        "description": "sn+aki / unique_id pick one of two",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/workload.RevokeCertsParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": " ",
                        "schema": {
                            "$ref": "#/definitions/helper.MSPNormalizeHTTPResponseBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    }
                }
            }
        },
        "/workload/units_certs_list": {
            "get": {
                "description": "List of service certificates",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workload"
                ],
                "summary": "(p1)List of service certificates",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Query unique_id",
                        "name": "unique_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Certificate type",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Expiration, starting point",
                        "name": "expiry_start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Expiration, end time point",
                        "name": "expiry_end_time",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Disable, 1 disable, 2 enable",
                        "name": "is_forbid",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Paging parameters, default 20",
                        "name": "limit_num",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of pages, default 1",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": " ",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.MSPNormalizeHTTPResponseBody"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/workload.UnitsCertsItem"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    }
                }
            }
        },
        "/workload/units_forbid_query": {
            "get": {
                "description": "Query unique_id Is it forbidden to apply for certificate",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workload"
                ],
                "summary": "Prohibit applying for certificate query",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "Query unique_ID array",
                        "name": "unique_ids",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": " ",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.MSPNormalizeHTTPResponseBody"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/workload.UnitsForbidQueryResult"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    }
                }
            }
        },
        "/workload/units_status": {
            "post": {
                "description": "Service corresponding status query",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workload"
                ],
                "summary": "(p1)Service corresponding status query",
                "parameters": [
                    {
                        "description": "Query unique_ID array",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/workload.UnitsStatusReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": " ",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.MSPNormalizeHTTPResponseBody"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPWrapErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "ca.IntermediateObject": {
            "type": "object",
            "properties": {
                "certs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schema.FullCert"
                    }
                },
                "children": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ca.IntermediateObject"
                    }
                },
                "current": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/schema.CaMetadata"
                }
            }
        },
        "ca.OverallCertsCountItem": {
            "type": "object",
            "properties": {
                "role": {
                    "type": "string"
                },
                "total": {
                    "description": "Total number of certificates",
                    "type": "integer"
                },
                "units_count": {
                    "description": "number of services",
                    "type": "integer"
                }
            }
        },
        "ca.OverallCertsCountResponse": {
            "type": "object",
            "properties": {
                "certs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ca.OverallCertsCountItem"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "ca.OverallExpiryCertsResponse": {
            "type": "object",
            "properties": {
                "expiry_certs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ca.OverallExpiryGroup"
                    }
                },
                "expiry_total": {
                    "type": "integer"
                }
            }
        },
        "ca.OverallExpiryGroup": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "ca.OverallUnitsEnableItem": {
            "type": "object",
            "properties": {
                "certs_count": {
                    "type": "integer"
                },
                "units_count": {
                    "type": "integer"
                }
            }
        },
        "ca.OverallUnitsEnableStatus": {
            "type": "object",
            "properties": {
                "disable": {
                    "$ref": "#/definitions/ca.OverallUnitsEnableItem"
                },
                "enable": {
                    "$ref": "#/definitions/ca.OverallUnitsEnableItem"
                }
            }
        },
        "ca.RoleProfile": {
            "type": "object",
            "properties": {
                "auth_key": {
                    "type": "string"
                },
                "expiry_duration": {
                    "type": "string"
                },
                "expiry_string": {
                    "type": "string"
                },
                "is_ca": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "usages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ca.WorkloadUnit": {
            "type": "object",
            "properties": {
                "first_issued_at": {
                    "description": "Date of first issuance of certificate",
                    "type": "string"
                },
                "forbidden": {
                    "description": "Is it prohibited",
                    "type": "boolean"
                },
                "role": {
                    "type": "string"
                },
                "unique_id": {
                    "type": "string"
                },
                "valid_num": {
                    "description": "Number of valid certificates",
                    "type": "integer"
                }
            }
        },
        "certleaf.LeafCert": {
            "type": "object",
            "properties": {
                "aki": {
                    "type": "string"
                },
                "cert_info": {
                    "$ref": "#/definitions/schema.Certificate"
                },
                "cert_str": {
                    "description": "Show certificate details",
                    "type": "string"
                },
                "cn": {
                    "type": "string"
                },
                "expiry": {
                    "type": "string"
                },
                "issued_at": {
                    "type": "string"
                },
                "issuer_cert": {
                    "$ref": "#/definitions/certleaf.LeafCert"
                },
                "not_before": {
                    "type": "string"
                },
                "o": {
                    "type": "string"
                },
                "ou": {
                    "type": "string"
                },
                "revoked_at": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "sn": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "example": "good"
                },
                "unique_id": {
                    "type": "string"
                }
            }
        },
        "certleaf.RootCertChains": {
            "type": "object",
            "properties": {
                "root": {
                    "$ref": "#/definitions/ca.IntermediateObject"
                }
            }
        },
        "helper.HTTPWrapErrorResponse": {
            "type": "object",
            "properties": {
                "errCode": {
                    "type": "string"
                },
                "msg": {
                    "type": "string"
                }
            }
        },
        "helper.MSPNormalizeHTTPResponseBody": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "helper.MSPNormalizeList": {
            "type": "object",
            "properties": {
                "list": {},
                "paginate": {
                    "$ref": "#/definitions/helper.MSPNormalizePaginate"
                }
            }
        },
        "helper.MSPNormalizePaginate": {
            "type": "object",
            "properties": {
                "current": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "schema.CaMetadata": {
            "type": "object",
            "properties": {
                "o": {
                    "type": "string"
                },
                "ou": {
                    "type": "string"
                },
                "spiffe_id": {
                    "$ref": "#/definitions/spiffe.IDGIdentity"
                }
            }
        },
        "schema.Certificate": {
            "type": "object",
            "properties": {
                "authority_key_id": {
                    "type": "string"
                },
                "issuer": {
                    "type": "object"
                },
                "not_after": {
                    "type": "string"
                },
                "not_before": {
                    "type": "string"
                },
                "sans": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "serial_number": {
                    "type": "string"
                },
                "sigalg": {
                    "type": "string"
                },
                "subject": {
                    "type": "object"
                },
                "subject_key_id": {
                    "type": "string"
                }
            }
        },
        "schema.FullCert": {
            "type": "object",
            "properties": {
                "aki": {
                    "type": "string"
                },
                "cert_info": {
                    "$ref": "#/definitions/schema.Certificate"
                },
                "cert_str": {
                    "description": "Show certificate details",
                    "type": "string"
                },
                "cn": {
                    "type": "string"
                },
                "expiry": {
                    "type": "string"
                },
                "issued_at": {
                    "type": "string"
                },
                "not_before": {
                    "type": "string"
                },
                "o": {
                    "type": "string"
                },
                "ou": {
                    "type": "string"
                },
                "revoked_at": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "sn": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "example": "good"
                },
                "unique_id": {
                    "type": "string"
                }
            }
        },
        "schema.SampleCert": {
            "type": "object",
            "properties": {
                "aki": {
                    "type": "string"
                },
                "cn": {
                    "type": "string"
                },
                "expiry": {
                    "type": "string"
                },
                "issued_at": {
                    "type": "string"
                },
                "not_before": {
                    "type": "string"
                },
                "o": {
                    "type": "string"
                },
                "ou": {
                    "type": "string"
                },
                "revoked_at": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "sn": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "example": "good"
                },
                "unique_id": {
                    "type": "string"
                }
            }
        },
        "spiffe.IDGIdentity": {
            "type": "object",
            "properties": {
                "cluster_id": {
                    "type": "string"
                },
                "site_id": {
                    "type": "string"
                },
                "unique_id": {
                    "type": "string"
                }
            }
        },
        "workload.ForbidNewCertsParams": {
            "type": "object",
            "properties": {
                "unique_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "workload.ForbidUnitParams": {
            "type": "object",
            "required": [
                "unique_id"
            ],
            "properties": {
                "unique_id": {
                    "type": "string"
                }
            }
        },
        "workload.RecoverCertsParams": {
            "type": "object",
            "properties": {
                "aki": {
                    "type": "string"
                },
                "sn": {
                    "type": "string"
                },
                "unique_id": {
                    "type": "string"
                }
            }
        },
        "workload.RevokeCertsParams": {
            "type": "object",
            "properties": {
                "aki": {
                    "type": "string"
                },
                "sn": {
                    "type": "string"
                },
                "unique_id": {
                    "type": "string"
                }
            }
        },
        "workload.UnitForbidQueryItem": {
            "type": "object",
            "properties": {
                "forbid": {
                    "type": "boolean"
                },
                "unique_id": {
                    "type": "string"
                }
            }
        },
        "workload.UnitsCertsItem": {
            "type": "object",
            "properties": {
                "certs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schema.FullCert"
                    }
                },
                "forbidden": {
                    "type": "boolean"
                },
                "unique_id": {
                    "type": "string"
                }
            }
        },
        "workload.UnitsForbidQueryResult": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/workload.UnitForbidQueryItem"
                    }
                }
            }
        },
        "workload.UnitsStatusReq": {
            "type": "object",
            "required": [
                "unique_ids"
            ],
            "properties": {
                "unique_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
